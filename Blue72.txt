72 hour project


create webapi by creating a asp.net web aplication (.NET framework)
name the project Blue72.WebAPI, and the solution Blue72
select Web API when creating the web application, and change the authentication to individual user account, and click create
visual studio will scaffold out the solution. right click on the solution once it is done
go to add -> new project
select or search for class library (.NET framework)
name this assembly Blue72.Data; right click class1 and delete it
repeat these steps to create the models and services assemblies
Dealing with the identity model: moving it to a better location for our project
The web api project should have a models folder with a file called IdentityModels.cs
this is part of our user authentication from microsoft. to make it more accessible we need to move it
find it in the models folder of the web api and move it to the Blue72.Data folder
change its namespace to Blue72.Data; now there are errors to be resolved
currently the code in the webapi does not have access to the identitymodels.cs file
now we need to add entity framework to the projects. right click on the solution
select manage nuget packages for solution. click on the installed tab (we can do this because it came installed in our web api  assembly)
choose microsoft.aspnet.identity. entityframwork; click the project checkbox on the right side
after being sure all projects are selected click installed
!now search for  owin, select the microsoft.aspnet.identity.owin and microsoft.aspnetwebapi.owin
these two are only installed on the data project!
!when I followed eleven note these come up as already installed, so I did not uninstall them from the other projects!
!except it didnt work so I re opened the nuget package manager after right clicking on the solution, and am now having to do as they said *shrug*!

now we will add our references. 
we need to decide what assemblies need to know about what other assemblies in our case
right click the webapi and go to add->reference, click on projects->solution. select the data models and services projects
we need to add our using statements. attempt to build the project with CTRL+SHIFT+B
there will be several problems. select the first one. it will actually take us to the identityconfig.cs in the app start folder for the webapi project. fix it by pressing CTRL+. and bringing in a using statement as suggested. this will fix that particular problem, so we can rinse and repeat. telling visual studio to build the project saves all the files and attempts to build the program. more errors (really some of the same that had been reported earlier) will appear; follow the same steps to go to the errors and use CTRL+. to bring in a using statement until there are none left. 
now lets set up git, and push to github
click source control,  it shows a menu of 1 : git. click that and it should open up a windows where it wants to make a local and remote repository on github.
Next step: configure identity model.
in the data layer, open the identitymodels.cs file. find the applicationDbContext class
underneath but still inside the namespace, create a identityuserloginconfiguration (PascalCase)
make it public and have it inherit from entityTypeConfiguration<IdentityUserLogin>
it needs a constructor with a single line of code: HasKey(iul => iul.UserId)
Ctrl+. to bring in using system  bla bla modelConfiguration
create another class IdentityUserRoleConfiguration : EntityTypeConfiguration<IdentityUserRole>
with the same kind of constructor with the haskey(iul => iur.UserId) (note the l and r on the fields)
above in the applicationDbContext add a field DbSet<Note> now, elevennote has note classes and 
several others
this app will have several different classes, namely post, comment, reply, and like class
so our DbSet should be of that type, and we will be creating those classes in the next couple steps (I hope)
so create the DbSet with a Post in place of the Note
finally under the Posts property, type override onModelCreating(modelBuilder)
delete the base.OnModelCReating method, and replace it with modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
modelBuilder.Configurations.Add(new IdentityUserLoginConfiguration()).Add(new IdentityUserRoleConfiguration());
CTRL+. to bring in the using statement. Now its time to deal with the data layer and finally add some classes
right click on the data layer assembly, and add->class. we need to add all the different classes here, and annotate them so they have the the correct properties.
our post has an id, title, text, virtual list of comments, virtual list of likes, and a guid author id
the comment class will have an id, a text, guid author id, virtual list of replies, foreign key to post and virtual post
reply class with an id, a foreign key to comment with virtual comment, text and guid author id
finally a like class with an id a virtual foreign key etc to post, and a guid ownerid
eleven note focuses on creating the note class, and then building out the different layers for that so that it can be tested and then expanded
so we will do that for post. add the annotations the different properties need, and save
there are different annotations that can be used to create validations on our fields
required, range and max length and display are some. 
**
we must set up the connection string: open web.config in the webapi assembly
we can see a tag called connectionstring, that has a name inside called defaultconnection
if we look at IDentityModels that we moved to the data layer, there is a constructor for the applicationDbContext that takes that as an argument.
Back in the webconfig, we see the name of the database is in two places.
the current setup has a mdf file with the name of our database, and an initial catalog value of the same name. replace everything inside the connectionstring tags with a slightly different, simpler and shorter connectionstring.currently it says aspnet-blue72.webApi-397364583764, and we will change that to be just initial catalog = Blue72;
**
try to build the project, and deal with errors that arise. I had forgotten to make the different classes public, so had to go and add that to each before the program would build
when there are no errors, now create a commit with git
launch the program, and click the API link on the navigation section to see the documentation
we will create a user account with the api by using the api/account/register endpoint
create a post command with the localhost address of the application from the browser window, followed by api/account/register. using whatever email and password you want that conforms to the requirements, create a user with the post command. now we will use that combination to get a token from the web app
be sure to go ahead and code out all the fields and annotations in the four classes. Key, Required, ForeignKey(nameof()) along with virtual properties and lists that must be initialized explicitly
run the app and use postman and the eleven note guide to create a user and password combination and register it with the database. since it works, commit the changes.
run the post command, then run a different post command with /Token at the end of the port number. this plus the username and password will send back a long string called a token
copy and save for later. Guids are Global Unique Identifiers, and have a very very small chance of being duplicated (one in one trillion)
time to start making our model layer, starting with a model to be part of a list of Posts
right click on the model assembly and add->class, call it PostListItem
this model only needs a small amount of info, the id and the title. create those fields
next a PostCreate model to validate the info we use to create a post. add the required annotation to the title and use CTRL+. to bring in the using statement. also add several other requirements, such as MinLength(2,ErrorMessage = "Please enter at least 2 characters.")
and MaxLength(100, ErrorMessage = "There are too many character in the field.")
as well as a MaxLength(8000) for the Content. with that done we need a service for Post
aptly named PostService in the service layer will be how our application interacts with the database. this class needs as private readonly Guid _userId, which we will asign in the constructor the value of the passed in userId. this assembly needs references to the model and data layer, so right click on the services assembly and choose Add->References, selecting models and data assemblies.
to the class, add a CreatePost method that will have PostCreate model as an argument
too much to type here, but create a var entity = new post, then use curly braces after the post to be able to set the authorId and title etc to those values stored in the model; then have a using statement to allow the entity created above to be added to the database and return a boolean on success or failure. similarly, create a getPosts method that returns an array representation of a LINQ query for all posts that have an authorId equal to the current users Id. this method allows us to see all posts created by a particular user
finally we need to add a controller to to api assembly. right click the controller folder and select add->controller. make it an empty web api 2 controller, called PostController
add [Authorize]
